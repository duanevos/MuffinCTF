@using MuffinCTF.Domain.Enum
@inject ICCService CCService
@inject IChallengeService ChallengeService
@inject IUserService UserService

<PageTitle>&#128225; @Challenges.showCategory </PageTitle>

<div class="flex items-center justify-center h-screen w-screen overflow-auto">
    <div class="window max-h-fit w-1/2">
        <div class="title-bar w-full flex flex-row  select-none">
            <div class="title-bar-text">
                C:\Users\Muffin\Desktop\@Challenges.showCategory.ToLower()<span>.exe</span>
            </div>
            <div class="title-bar-controls bg-neutral-300">
                <button @onclick=@(() => Challenges.OnCloseClick()) aria-label="Close"></button>
            </div>
        </div>
        <div class="window-content gap-4 w-full flex flex-wrap flex-row justify-center m-2">
            @if (challengeList.Any())
            {
                @foreach (Challenge c in challengeList)
                {
                    <button class="h-10 font-bold p-2 text-base" @onclick=@(() => OnChallengeClick(c))>Challenge @c.Name</button>
                }
                @if (!string.IsNullOrEmpty(selectedChallenge))
                {
                    <CascadingValue Value="this">
                        <ChallengeTab showHintId="showHintId" challenge="challengeList.First(x => x.Name == selectedChallenge)" />
                    </CascadingValue>
                }
            } else {
                <p class="text-base font-bold">&#129497; You've completed all the <span class="text-blue-800">@Challenges.showCategory</span> challenges &#128558; &#128077;</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Challenges Challenges { get; set; }
    public int showHintId { get; set; } = 0;
    private List<Challenge> challengeList { get; set; } = new();
    private string selectedChallenge { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var challengesByCategory = await ChallengeService.GetChallengesByCategory((Category)Enum.Parse(typeof(Category), Challenges.showCategory.ToLower()));
        if (challengesByCategory == null) return;

        var completedChallenges = await CCService.GetCompletedChallenges(Challenges.User.Id);
        if (completedChallenges == null) challengeList = challengesByCategory;
        else
        {
            foreach (Challenge c in challengesByCategory)
            {
                if (!completedChallenges.Any(x => x.ChallengeId == c.Id))
                {
                    challengeList.Add(c);
                }
            }
        }
        challengeList = challengeList.OrderBy(x => x.Name).ToList();
    }

    public async Task OnFlagCorrectSubmit(Challenge challenge, int ShownHintsCount)
    {
        selectedChallenge = "";
        await Challenges.HandleCookie();
        await CCService.AddCompletedChallenge(challenge.Id, Challenges.User.Id);
        await UserService.UpdateUserScore(Challenges.User, (challenge.Points - (50 * ShownHintsCount)));
        challengeList.Remove(challenge);
        StateHasChanged();
    }

    private void OnChallengeClick(Challenge c)
    {
        selectedChallenge = c.Name;
        showHintId = 0;
    }
}