@inject IChallengeService ChallengeService

<PageTitle>&#129473; @challenge.Category @challenge.Name</PageTitle>

<div class="window-body w-full">
    <div class="font-bold text-base text-center flex flex-col items-center justify-center">
        <h1 class="text-3xl text-blue-800 uppercase">&#129473; @challenge.Category @challenge.Name &#129473;</h1>
        <div class="w-11/12">
            @challenge.Description
            
            @if(!string.IsNullOrEmpty(challenge.URL)){
                if (challenge.URL.StartsWith("http"))
                {
                    <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">URL</h2>
                    <a href="@challenge.URL" class="text-blue-700">URL</a>
                } else
                {
                    <div class="flex flex-col items-center text-center justify-center w-full">
                        <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Image</h2>
                        <img src="img/@challenge.URL" style="width: 256px; height: auto;" alt="osint1">
                    </div>
                }
            }

            @if (challenge.Hints != null && challenge.Hints.Count > 0)
            {
                <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Hints (-50 points)</h2>
                <div class="flex flex-auto justify-center space-x-2 w-full">
                    @foreach (Hint h in challenge.Hints)
                    {
                        <div class="flex mb-2 items-center text-center">
                            <button @ondblclick=@(() => OnHintClick(h.Id)) class="max-w-fit">Hint</button>
                        </div>
                    }
                </div>

                @if (showHintId != 0)
                {
                    <p class="block mb-3">
                        @challenge.Hints.First(x => x.Id == showHintId).Text
                    </p>
                }
            }
            
            <div class="text-red-600 font-bold text-xl">
                @errorMsg
            </div>

            <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Points</h2>
            <div>@challenge.Points</div>

            <div class="mt-0">
                <input @bind=flag class="TextBox w-1/2 py-2 px-3 text-stone-900" id="username" type="text" placeholder="Flag">
            </div>
            <button disabled="@loading" @onclick=@validateFlag class="p-1 mt-1 w-1/2">Submit Flag</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public CategoryWindow CategoryWindow { get; set; }
    [Parameter]
    public Challenge challenge { get; set; }
    [Parameter]
    public int showHintId { get; set; }
    private string flag { get; set; } = "";
    private bool loading = false;
    private string errorMsg = "";
    private List<int> shownHints = new();

    private void OnHintClick(int hintId)
    {
        showHintId = hintId;
        if (!shownHints.Contains(hintId))
        {
            shownHints.Add(hintId);
        }
    }

    private async Task validateFlag()
    {
        loading = true;
        StateHasChanged();
        if (await ChallengeService.ValidateChallengeFlag(challenge, flag))
        {
            await CategoryWindow.OnFlagCorrectSubmit(challenge, shownHints.Count);
            loading = false;
            StateHasChanged();
        }
        else
        {
            errorMsg = "Dirty Muffin, Incorrect!";
            loading = false;
            StateHasChanged();
        }
    }
}
