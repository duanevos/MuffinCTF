@inject IChallengeService ChallengeService

<PageTitle>&#129473; @challenge.Category @challenge.Name</PageTitle>

<div class="window-body w-full">
    <div class="font-bold text-base text-center flex flex-col items-center justify-center">
        <h1 class="text-3xl text-blue-800 uppercase">&#129473; @challenge.Category @challenge.Name &#129473;</h1>
        <div class="w-11/12">
            @challenge.Description
            <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Hints</h2>
            <div class="flex flex-auto justify-center space-x-2 w-full">
                @foreach (Hint h in challenge.Hints)
                {
                    <div class="flex mb-2 items-center text-center">
                        <button @onclick=@(() => showHintId = h.Id) class="max-w-fit">Hint</button>
                    </div>
                }
            </div>
            
            @if (showHintId != 0)
            {
                <p class="block mb-3">
                    @challenge.Hints.First(x => x.Id == showHintId).Text
                </p>
            }
            
            <div class="text-red-600 font-bold text-xl">
                @errorMsg
            </div>
            <div class="mt-0">
                <input @bind=flag class="TextBox w-1/2 py-2 px-3 text-stone-900" id="username" type="text" placeholder="Flag">
            </div>
            <button disabled="@loading" @onclick=@validateFlag class="p-1 mt-1 w-1/2">Submit Flag</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public CategoryWindow CategoryWindow { get; set; }
    [Parameter]
    public Challenge challenge { get; set; }
    [Parameter]
    public int showHintId { get; set; }
    
    private int hintIndex = 0;
    private string flag { get; set; } = "";
    private bool loading = false;
    private string errorMsg = "";

    private async Task validateFlag()
    {
        loading = true;
        StateHasChanged();
        if (flag == challenge.Flag)
        {
            await CategoryWindow.OnFlagCorrectSubmit(challenge);
            loading = false;
            StateHasChanged();
        }
        else
        {
            errorMsg = "Dirty Muffin, Incorrect!";
            loading = false;
            StateHasChanged();
        }
    }
}
