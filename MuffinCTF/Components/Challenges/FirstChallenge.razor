@inject IChallengeService ChallengeService

@using MuffinCTF.Domain
<div class="font-bold text-base text-center flex flex-col items-center justify-center">
    <h1 class="text-3xl text-blue-800">Challenge One</h1>
    <div class="w-1/2 whitespace-normal">
        &#129473; Welcome to Capture The Muffin &#129473;
        <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Advice</h2>
        <p>
            You should give yourself around 2 minutes for each challenge<br />
            when you don't understand it feel free to open the available hint<br /> or ask for help.
        </p>

        <h3 class="mt-5 text-xl mb-1 text-blue-800">Format</h3>
        <p>
            All flags have the following format: Muffin{Y0uR_Flag}
        </p>
        
        <h4 class="mt-5 text-xl mb-1 text-blue-800 ">A freebie, your first flag &#128681; </h4>
        <p class="mb-3">
            <span class="cursor-text ">
                Muffin{Lets_Get_Started}
            </span>
        </p>
        
        <div class="text-red-600 font-bold text-xl">
            @errorMsg
        </div>
        <div class="mt-0">
            <input @bind=flag class="TextBox w-1/3 py-2 px-3 text-stone-900" id="username" type="text" placeholder="Flag">
        </div>
        <button @onclick=@validateFlag class="p-1 mt-1 w-1/3">Submit Flag</button>
    </div>
</div>

@code{
    private string flag { get; set; } = "";
    [CascadingParameter]
    public Challenges Challenges { get; set; }
    private Challenge? firstChallenge { get; set; }
    private string errorMsg = "";

    protected async override Task OnInitializedAsync()
    {
        firstChallenge = await ChallengeService.GetChallenge(1);
    }

    private void validateFlag()
    {
        if (flag == firstChallenge!.Flag)
        {
            Challenges!.OnFlagCorrectSubmit(firstChallenge);
        } else {
            errorMsg = "Dirty Muffin, Incorrect!";
        }
    }
}