@inject IChallengeService ChallengeService

<div class="flex justify-center items-center h-screen">
    <div class="window h-fit w-1/2">
        <div class="title-bar">
            <div class="title-bar-text">
                Challenges
            </div>
        </div>
        <div class="window-body w-full">
            <div class="font-bold text-base text-center flex flex-col items-center justify-center">
                <h1 class="text-3xl text-blue-800">Challenge One</h1>
                <div class="w-1/2">
                    &#129473; Welcome to Capture The Muffin &#129473;
                    <h2 class="mt-5 text-2xl mb-1 font-bold text-blue-800">Advice</h2>
                    <p>
                        You should give yourself around 2 minutes for each challenge.
                        If you get stuck feel free to look at the hints provided to 
                        you or ask us for help!
                    </p>

                    <h3 class="mt-5 text-xl mb-1 text-blue-800">Format</h3>
                    <p>
                        All flags have the following format <span class="text-red-600">&#9654;</span> Muffin{your_flag}
                    </p>

                    <h4 class="mt-5 text-xl mb-1 text-blue-800 ">A freebie, your first flag &#128681; </h4>
                    <p class="mb-3">
                        <span class="cursor-text ">
                            @firstChallenge.Flag
                        </span>
                    </p>

                    <div class="text-red-600 font-bold text-xl">
                        @errorMsg
                    </div>
                    <div class="mt-0">
                        <input @bind=flag class="TextBox w-1/3 py-2 px-3 text-stone-900" id="username" type="text" placeholder="Flag">
                    </div>
                    <button @onclick=@validateFlag class="p-1 mt-1 w-1/3">Submit Flag</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string flag { get; set; } = "";
    [CascadingParameter]
    public Challenges Challenges { get; set; }
    private Challenge? firstChallenge { get; set; }
    private string errorMsg = "";

    protected async override Task OnInitializedAsync()
    {
        firstChallenge = await ChallengeService.GetChallenge(1);
    }

    private void validateFlag()
    {
        if (flag == firstChallenge!.Flag)
        {
            Challenges!.OnFlagCorrectSubmit(firstChallenge);
        }
        else
        {
            errorMsg = "Dirty Muffin, Incorrect!";
        }
    }
}