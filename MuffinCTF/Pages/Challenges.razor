@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject CCService CCService
@inject IChallengeService ChallengeService
@using MuffinCTF.Components.Challenges

@page "/challenges"
@using MuffinCTF.Domain

@if (loading)
{
    <Loading />
}
else
{
    <div class="flex justify-center items-center h-screen">
        <div class="window h-fit w-4/6">
            <div class="title-bar">
                <div class="title-bar-text">
                    Challenges
                </div>
            </div>
            <div class="window-body">
                <div class="">
                    <CascadingValue Value="this">
                        @if (completedFirstChallenge) {
                            <ButtonGroup />
                        } else {
                            <FirstChallenge />
                        }
                    </CascadingValue>
                </div>
            </div>
        </div>
    </div>
}


@code {
    //Used for conditional rendering
    private bool loading = true;
    private bool completedFirstChallenge = false;
    public string showCategory = "";
    
    //Logged in User
    private User? User { get; set; } = null;
    
    //Challenges To Complete
    private List<Challenge> challenges { get; set; } = new List<Challenge>();

    
    

    //Has to be OnAfterRenderAsync
    //JavaScript interop calls can only be performed during the OnAfterRenderAsync lifecycle method.
    //Using JSInterop call for cookies.
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            var tokenCookie = await cookie.GetValue("token");
            var usernameCookie = await cookie.GetValue("user");
            var user = await UserService.ValidateToken(tokenCookie, usernameCookie);
            if (tokenCookie != string.Empty || usernameCookie != string.Empty || user is not null)
            {
                
                completedFirstChallenge = await CCService.CheckIfCompleted(1, user!.Id);
                loading = false;
                User = user;
                
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public async void OnFlagCorrectSubmit(Challenge challenge)
    {
        await CCService.AddCompletedChallenge(challenge.Id, User!.Id);
        await UserService.UpdateUserScore(User);
        completedFirstChallenge = true;
        StateHasChanged();
    }
}
