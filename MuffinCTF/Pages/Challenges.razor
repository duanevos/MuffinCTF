@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ICookie cookie
@inject ICCService CCService
@inject IChallengeService ChallengeService
@using MuffinCTF.Components.Challenges
@page "/challenges"

@if (loading)
{
    <Loading />
}
else
{
    <CascadingValue Value="this">
        @if (!completedFirstChallenge)
        {
            <FirstChallenge />
        }
        else
        {
            @if (showIcons)
            {
                <Icons />
            }
            else
            {
                <div class="overflow-hidden">
                    <CategoryWindow />
                </div>
            }
        }
    </CascadingValue>
}

@code {
    //Used for conditional rendering
    private bool loading = true;
    private bool completedFirstChallenge = false;
    public string showCategory = "";
    public bool showIcons = true;

    //Logged in User
    public User? User { get; set; } = null;

    //Challenges To Complete
    private List<Challenge> challenges { get; set; } = new List<Challenge>();

    //Has to be OnAfterRenderAsync
    //JavaScript interop calls can only be performed during the OnAfterRenderAsync lifecycle method.
    //Using JSInterop call for cookies.
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleCookie();
        }
    }

    public async Task OnFlagCorrectSubmit(Challenge challenge)
    {
        await HandleCookie();
        await CCService.AddCompletedChallenge(challenge.Id, User!.Id);
        await UserService.UpdateUserScore(User);
        completedFirstChallenge = true;
        StateHasChanged();
    }

    public void OnDblClick(string category)
    {
        showCategory = category;
        showIcons = !showIcons;
        StateHasChanged();
    }

    public async Task OnCloseClick()
    {
        await HandleCookie();
        showCategory = "";
        showIcons = !showIcons;
        StateHasChanged();
    }

    private async Task HandleCookie()
    {
        var tokenCookie = await cookie.GetValue("token");
        var usernameCookie = await cookie.GetValue("user");
        var user = await UserService.ValidateToken(tokenCookie, usernameCookie);
        
        if (tokenCookie != string.Empty &&
            usernameCookie != string.Empty &&
            user is not null
            )
        {
            completedFirstChallenge = await CCService.CheckIfCompleted(1, user!.Id);
            loading = false;
            User = user;
            StateHasChanged();
        }
        
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
