@page "/login"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ICookie Cookie

@if (loading)
{
    <Loading />
}
else
{
    <div class="flex flex-col items-center justify-center h-screen">
        <div class="text-stone-900 font-black text-center select-none type">
            <h1 class="font-black">
                <pre style="box-shadow: none;" class="bg-transparent">
    ░█████╗░░█████╗░██████╗░████████╗██╗░░░██╗██████╗░███████╗  ████████╗██╗░░██╗███████╗
    ██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██║░░░██║██╔══██╗██╔════╝  ╚══██╔══╝██║░░██║██╔════╝
    ██║░░╚═╝███████║██████╔╝░░░██║░░░██║░░░██║██████╔╝█████╗░░  ░░░██║░░░███████║█████╗░░
    ██║░░██╗██╔══██║██╔═══╝░░░░██║░░░██║░░░██║██╔══██╗██╔══╝░░  ░░░██║░░░██╔══██║██╔══╝░░
    ╚█████╔╝██║░░██║██║░░░░░░░░██║░░░╚██████╔╝██║░░██║███████╗  ░░░██║░░░██║░░██║███████╗
    ░╚════╝░╚═╝░░╚═╝╚═╝░░░░░░░░╚═╝░░░░╚═════╝░╚═╝░░╚═╝╚══════╝  ░░░╚═╝░░░╚═╝░░╚═╝╚══════╝
    ███╗░░░███╗██╗░░░██╗███████╗███████╗██╗███╗░░██╗
    ████╗░████║██║░░░██║██╔════╝██╔════╝██║████╗░██║
    ██╔████╔██║██║░░░██║█████╗░░█████╗░░██║██╔██╗██║
    ██║╚██╔╝██║██║░░░██║██╔══╝░░██╔══╝░░██║██║╚████║
    ██║░╚═╝░██║╚██████╔╝██║░░░░░██║░░░░░██║██║░╚███║
    ╚═╝░░░░░╚═╝░╚═════╝░╚═╝░░░░░╚═╝░░░░░╚═╝╚═╝░░╚══╝
                    </pre>
            </h1>
        </div>
        <div class="w-full max-w-xs">
            <form class="window">
                <div class="title-bar">
                    <div class="title-bar-text">
                        Login
                    </div>
                </div>
                <div class="window-body">
                    <div class="text-lg text-center text-red-600">
                        @errorMsg
                    </div>
                    <div class="mb-3">
                        <label class="block text-neutral-900 text-sm font-bold mb-2" for="username">
                            Username
                        </label>
                        <input @bind=username class="TextBox w-full py-2 px-3 text-stone-900" id="username" type="text" placeholder="Username">
                    </div>
                    <div class="mb-3">
                        <label class="block text-neutral-900 text-sm font-bold mb-2" for="username">
                            Password
                        </label>
                        <input @bind=password class="TextBox w-full py-2 px-3 text-stone-900" id="username" type="password" placeholder="Password">
                    </div>
                    <div class="flex items-center text-neutral-900 font-bold justify-between">
                        <button @onclick="OnLoginClick" class="TextBox w-1/3" type="button">
                            Login
                        </button>
                        <button @onclick="OnRegisterClick" class="TextBox w-1/3" type="button">
                            Register
                        </button>
                    </div>
                </div>
            </form>
            <p class="mt-2 text-center text-stone-900 font-monospace font-bold">
                By the Reckless Muffins
            </p>
        </div>
    </div>
}

@code {
    private string username = "";
    private string password = "";
    private string errorMsg = "";
    private bool loading = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var tokenCookie = await Cookie.GetValue("token");
            var user = await UserService.ValidateToken(tokenCookie);

            if (tokenCookie != string.Empty &&user is not null)
            {
                NavigationManager.NavigateTo("/challenges");
            }
            else
            {
                loading = false;
                StateHasChanged();
            }
        }
    }

    private bool ValidateInput()
    {
        if (username == "" || password == "")
        {
            errorMsg = "Please enter a username and password";
            return false;
        }
        return true;
    }

    private async Task OnRegisterClick()
    {
        if (!ValidateInput()) return;
        if (!await UserService.Register(username, password))
        {
            errorMsg = "Failed to register, try again.";
            return;
        }
        await UserService.Register(username, password);
        await OnLoginClick();
    }

    private async Task OnLoginClick()
    {
        if (!ValidateInput()) return;
        if (!await UserService.Login(username, password))
        {
            errorMsg = "Failed to login, try again.";
            return;
        }
        var tokenValue = BCrypt.Net.BCrypt.HashPassword(username);
        await Cookie.SetValue("user", username);
        await Cookie.SetValue("token", tokenValue);
        await UserService.SetToken(username, tokenValue);
        NavigationManager.NavigateTo("/challenges");
    }
}